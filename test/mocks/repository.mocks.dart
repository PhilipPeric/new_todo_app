// Mocks generated by Mockito 5.4.2 from annotations
// in new_todo_app/test/mocks/repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:new_todo_app/data/source/local_data_source.dart' as _i5;
import 'package:new_todo_app/data/source/remote_data_source.dart' as _i2;
import 'package:new_todo_app/domain/model/todo.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRemoteDataSource extends _i1.Mock implements _i2.IRemoteDataSource {
  MockIRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ToDo>> listTodos() => (super.noSuchMethod(
        Invocation.method(
          #listTodos,
          [],
        ),
        returnValue: _i3.Future<List<_i4.ToDo>>.value(<_i4.ToDo>[]),
      ) as _i3.Future<List<_i4.ToDo>>);
  @override
  _i3.Future<_i4.ToDo?> updateTodoCompletion({required _i4.ToDo? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodoCompletion,
          [],
          {#todo: todo},
        ),
        returnValue: _i3.Future<_i4.ToDo?>.value(),
      ) as _i3.Future<_i4.ToDo?>);
  @override
  _i3.Future<_i4.ToDo?> updateTodo({required _i4.ToDo? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [],
          {#todo: todo},
        ),
        returnValue: _i3.Future<_i4.ToDo?>.value(),
      ) as _i3.Future<_i4.ToDo?>);
  @override
  _i3.Future<_i4.ToDo?> createTodo({required _i4.ToDo? todo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [],
          {#todo: todo},
        ),
        returnValue: _i3.Future<_i4.ToDo?>.value(),
      ) as _i3.Future<_i4.ToDo?>);
  @override
  _i3.Future<bool> deleteTodo({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.ToDo?> getTodo({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #getTodo,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<_i4.ToDo?>.value(),
      ) as _i3.Future<_i4.ToDo?>);
  @override
  int getRevision() => (super.noSuchMethod(
        Invocation.method(
          #getRevision,
          [],
        ),
        returnValue: 0,
      ) as int);
  @override
  _i3.Future<List<_i4.ToDo>> patchTodos(
    List<_i4.ToDo>? todos,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchTodos,
          [
            todos,
            revision,
          ],
        ),
        returnValue: _i3.Future<List<_i4.ToDo>>.value(<_i4.ToDo>[]),
      ) as _i3.Future<List<_i4.ToDo>>);
}

/// A class which mocks [ILocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalDataSource extends _i1.Mock implements _i5.ILocalDataSource {
  MockILocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ToDo>> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i3.Future<List<_i4.ToDo>>.value(<_i4.ToDo>[]),
      ) as _i3.Future<List<_i4.ToDo>>);
  @override
  _i3.Future<void> saveTodo(
    _i4.ToDo? todo,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTodo,
          [
            todo,
            revision,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> updateTodo(
    _i4.ToDo? todo,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [
            todo,
            revision,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteTodo(
    String? id,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [
            id,
            revision,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<int> getRevision() => (super.noSuchMethod(
        Invocation.method(
          #getRevision,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<void> updateTodos(
    List<_i4.ToDo>? todos,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodos,
          [
            todos,
            revision,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
